{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","value","inputValue","onChange","handleChange","type","placeholder","App","setSearchedText","evt","setState","prevState","target","state","message","users","fetch","then","response","json","this","selectedMonsters","filter","m","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAO,SAACC,GACjB,OACG,sBAAKC,UAAU,UAAf,UACC,qBAAKC,IAAI,UAAUC,IAAK,yBAA2BH,EAAMI,QAAQC,GAAK,2BACvE,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHZC,G,MAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GACJ,qBAAKC,UAAU,YAAf,SACND,EAAMW,SAASC,KAAI,SAACR,GAAD,OAAY,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCL3CQ,G,MAAY,SAACb,GACtB,OAAQ,uBAAOc,MAAOd,EAAMe,WACxBd,UAAU,SACVe,SAAUhB,EAAMiB,aAChBC,KAAK,SACLC,YAAanB,EAAMmB,gBC8DZC,E,kDA/Db,aAAe,IAAD,8BACZ,gBAgCFC,gBAAgB,SAACC,GACf,EAAKC,UAAS,SAAAC,GAAS,MAAI,CACzBT,WAAYO,EAAIG,OAAOX,WAjCzB,EAAKY,MAAQ,CACXC,QAAS,cACThB,SAAU,CACR,CAACL,KAAK,eAAgBD,GAAI,QAC1B,CAACC,KAAK,WAAYD,GAAI,QACtB,CAACC,KAAK,SAAUD,GAAI,QACpB,CAACC,KAAK,2BAA4BD,GAAI,SAExCuB,MAAO,GACPb,WAAW,IAXD,E,qDAiBd,WAAqB,IAAD,OAClBc,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAF,GAAK,OAAE,EAAKL,SAAS,CAACK,QAAOjB,SAASiB,S,oBAoB9C,WAAU,IAAD,EACuBK,KAAKP,MAA5Bf,EADA,EACAA,SAAUI,EADV,EACUA,WACXmB,EAAmBvB,EAASwB,QAAO,SAAAC,GAAC,OAAEA,EAAE9B,KAAK+B,cAAcC,SAASvB,EAAWsB,kBACrF,OACE,qBAAKpC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,QAAf,6BACA,cAAC,EAAD,CAAWc,WAAYkB,KAAKP,MAAMX,WAAYE,aAAcgB,KAAKZ,gBAC/DF,YAAc,iBAEhB,sBACA,sBACA,cAAC,EAAD,CAAUR,SAAUuB,a,GArDXK,aCOJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d5f68596.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = (props) => {\r\n    return (\r\n       <div className=\"monster\"> \r\n        <img alt=\"monster\" src={'https://robohash.org/$' + props.monster.id + '?set=set2&size=150x150'}/>\r\n       <h2>{props.monster.name}</h2>\r\n       <p>{props.monster.email}</p>\r\n       </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Card} from '../../components/card/card.component'\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props)=> {\r\n    console.log(props)\r\n    return (<div className=\"card-list\">\r\n    { props.monsters.map((monster)=> <Card key={monster.id} monster={monster} ></Card>)  }\r\n</div>)\r\n}","import React from 'react';\r\nimport './search-box.styles.css'\r\nexport const SearchBox = (props) => {\r\n    return (<input value={props.inputValue} \r\n        className=\"search\"\r\n        onChange={props.handleChange} \r\n        type=\"search\" \r\n        placeholder={props.placeholder}\r\n        />\r\n        );\r\n}","import { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass  App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: 'Im IÃ±aki',\n      monsters: [\n        {name:'Frankenstein', id: '0001'},\n        {name:'Draculas', id: '0002'},\n        {name:'Zombie', id: '0003'},\n        {name:'Monstruo de las Galletas', id: '0004'},\n      ],\n      users: [],\n      inputValue:''\n    }\n    // this.reverse = this.reverse.bind(this);\n    // this.setSearchedText = this.setSearchedText.bind(this);\n    \n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=>this.setState({users, monsters:users}))\n  }\n  // reverse() {\n  //   // eslint-disable-next-line react/no-direct-mutation-state\n  //   this.setState(prevState => ({\n  //     monsters: prevState.monsters.map((el)=> {return {...el, name: el.name.split('').reverse().join('')}})\n  //   }));\n    \n  // }\n  // selectedMonsters() {\n  //   return this.state.monsters.filter((el)=>el.search(this.state.inputValue))\n    \n  // }\n  setSearchedText=(evt)=> {\n    this.setState(prevState=> ({\n      inputValue: evt.target.value\n    }));\n    \n  }\n  \n  render() {\n    const {monsters, inputValue} =this.state;\n    const selectedMonsters = monsters.filter(m=>m.name.toLowerCase().includes(inputValue.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"title\">monster rolodex</div>\n          <SearchBox inputValue={this.state.inputValue} handleChange={this.setSearchedText} \n            placeholder = \"Search robot\"\n          />\n          <p></p>\n          <p></p>\n          <CardList monsters={selectedMonsters}></CardList>\n          \n        </header>\n        \n      </div>\n    );\n  }\n  \n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}